type Question @entity {
  id: ID!

  templateId: BigInt!
  data: String!
  title: String
  outcomes: [String!]
  category: String
  language: String

  arbitrator: Bytes!
  openingTimestamp: BigInt!
  timeout: BigInt!

  currentAnswer: Bytes
  currentAnswerBond: BigInt
  currentAnswerTimestamp: BigInt

  isPendingArbitration: Boolean!
  arbitrationOccurred: Boolean!

  answerFinalizedTimestamp: BigInt

  indexedFixedProductMarketMakers: [FixedProductMarketMaker!]!

  conditions: [Condition!]! @derivedFrom(field: "question")
}

type Category @entity {
  id: ID!
  numConditions: Int!
  numOpenConditions: Int!
  numClosedConditions: Int!
}

type Condition @entity {
  id: ID!
  oracle: Bytes!
  questionId: Bytes!
  question: Question
  outcomeSlotCount: Int!
  resolutionTimestamp: BigInt
  payouts: [BigDecimal!]
  fixedProductMarketMakers: [FixedProductMarketMaker!]! @derivedFrom(field: "conditions")
}

type FixedProductMarketMaker @entity {
  id: ID!

  creator: Bytes!
  creationTimestamp: BigInt!

  collateralToken: Bytes!
  conditions: [Condition!]!
  fee: BigInt!

  collateralVolume: BigInt!
  scaledCollateralVolume: BigDecimal!
  outcomeTokenAmounts: [BigInt!]!
  outcomeTokenMarginalPrices: [BigDecimal!]
  outcomeSlotCount: Int
  liquidityMeasure: BigInt!
  scaledLiquidityMeasure: BigDecimal!
  liquidityParameter: BigInt!
  scaledLiquidityParameter: BigDecimal!

  lastActiveDay: BigInt!
  lastActiveHour: BigInt!
  collateralVolumeBeforeLastActiveDayByHour: [BigInt!]!

  runningDailyVolume: BigInt!
  scaledRunningDailyVolume: BigDecimal!
  lastActiveDayAndRunningDailyVolume: BigInt!
  lastActiveDayAndScaledRunningDailyVolume: BigInt!

  runningDailyVolumeByHour: [BigInt!]!
  sort24HourVolume0: BigInt!
  sort24HourVolume1: BigInt!
  sort24HourVolume2: BigInt!
  sort24HourVolume3: BigInt!
  sort24HourVolume4: BigInt!
  sort24HourVolume5: BigInt!
  sort24HourVolume6: BigInt!
  sort24HourVolume7: BigInt!
  sort24HourVolume8: BigInt!
  sort24HourVolume9: BigInt!
  sort24HourVolume10: BigInt!
  sort24HourVolume11: BigInt!
  sort24HourVolume12: BigInt!
  sort24HourVolume13: BigInt!
  sort24HourVolume14: BigInt!
  sort24HourVolume15: BigInt!
  sort24HourVolume16: BigInt!
  sort24HourVolume17: BigInt!
  sort24HourVolume18: BigInt!
  sort24HourVolume19: BigInt!
  sort24HourVolume20: BigInt!
  sort24HourVolume21: BigInt!
  sort24HourVolume22: BigInt!
  sort24HourVolume23: BigInt!

  indexedOnQuestion: Boolean!

  curatedByDxDao: Boolean!

  # copy of conditions' content if it is a 1-large array
  condition: Condition
  # lifted from condition
  question: Question
  # lifted from condition's question
  templateId: BigInt
  data: String
  title: String
  outcomes: [String!]
  category: String
  language: String
  arbitrator: Bytes
  openingTimestamp: BigInt
  timeout: BigInt
  # pushed from condition & question if this fpmm one of the first
  resolutionTimestamp: BigInt
  payouts: [BigDecimal!]
  currentAnswer: Bytes
  currentAnswerBond: BigInt
  currentAnswerTimestamp: BigInt
  isPendingArbitration: Boolean
  arbitrationOccurred: Boolean
  answerFinalizedTimestamp: BigInt

  poolMembers: [FpmmPoolMembership!] @derivedFrom(field: "pool")
  participants: [FpmmParticipation!] @derivedFrom(field: "fpmm")

  # Generalized TCR fields (Kleros Curate Contract for market verification)
  klerosTCRitemID: String
  klerosTCRstatus: Int
  klerosTCRregistered: Boolean
}

type FpmmPoolMembership @entity {
  id: ID!
  pool: FixedProductMarketMaker!
  funder: Account!
  amount: BigInt!
}

type FpmmParticipation @entity {
  id: ID!
  fpmm: FixedProductMarketMaker!
  participant: Account!

  # lifted from fpmm
  creationTimestamp: BigInt!
  collateralToken: Bytes!
  fee: BigInt!

  # lifted from fpmm's condition's question
  category: String
  language: String
  arbitrator: Bytes
  openingTimestamp: BigInt
  timeout: BigInt
}

type Account @entity {
  id: ID!
  fpmmPoolMemberships: [FpmmPoolMembership!] @derivedFrom(field: "funder")
  fpmmParticipations: [FpmmParticipation!] @derivedFrom(field: "participant")
}

type Token @entity {
  id: ID!
  scale: BigInt!
  ethPerToken: BigDecimal
}

type UniswapPair @entity {
  id: ID!
  token0: Token!
  token1: Token!
  reserve0: BigInt!
  reserve1: BigInt!
}

type Global @entity {
  # ID is empty string, this is a singleton
  id: ID!
  numConditions: Int!
  numOpenConditions: Int!
  numClosedConditions: Int!
  usdPerEth: BigDecimal
}

type _Schema_
  @fulltext(
    name: "marketSearch",
    language: en
    algorithm: rank,
    include: [
      {
        entity: "FixedProductMarketMaker",
        fields: [
          { name: "title" }
        ]
      }
    ]
  )

